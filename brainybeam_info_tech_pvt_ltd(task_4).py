# -*- coding: utf-8 -*-
"""BrainyBeam Info-Tech Pvt Ltd(Task_4)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FCTtLUS0bjxaNYND7qQy6vzvLF71WjYT

**Title: Optimizing Regression Model Performance, Description:
Apply lasso in dataset(https://www.kaggle.com/datasets/nishathakkar/100-sales) and calculate MSE,MAE,RMSE and it value should be minimum value come in range(0.111 or 1-12).**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np

data = pd.read_csv('100_Sales.csv')
print(data.columns)  # Check the column names

# Check for missing values
missing_values = data.isnull().sum()
print("Missing values in each column:\n", missing_values)

# Drop rows with NaN values in relevant columns
data = data.dropna(subset=['Total_Revenue', 'Unit_Cost'])

# Drop unnecessary columns
data = data.drop(['Unnamed: 9', 'Unnamed: 10'], axis=1)

# Define features and target variable
X = data.drop(['Total_Revenue'], axis=1)  # Drop the target variable
y = data['Total_Revenue']  # Set the target variable

# Convert categorical variables to dummy variables
X = pd.get_dummies(X, drop_first=True)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lasso = Lasso(alpha=0.1)
lasso.fit(X_train, y_train)  # Fitting the model
y_pred = lasso.predict(X_test)  # Making predictions

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'MSE: {mse}, MAE: {mae}, RMSE: {rmse}')